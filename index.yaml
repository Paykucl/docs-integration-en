openapi: 3.0.0
servers:
  - url: "https://app.payku.cl/"
    description: Default server
  - url: "https://des.payku.cl/"
    description: Sandbox server
info:
  description: |
    Select the documentation language: ES | <a href="">EN</a>

    # Integration 
    Payku offers various environments:
      - **•	Development:** where you can conduct complete operability tests
       URL:  https://des.payku.cl/
      - **•	Production:** 
       URL: https://app.payku.cl/

    # Register  
      To create transactions with Payku via the REST API, you must first complete a user and account registration in our system by following the instructions below:

    ## Create user 
    - You must create a user by registering at: https://BASE_URL/index/registro
      <br>
      <br>
      <div class='container'>
        <img src='./assets/iniciar-sesion.jpg' alt='Avatar' class='image' style='width:100%'>
        <div class='middle'>
          <a target='_blank' href='/assets/iniciar-sesion.jpg' class='text'>Ver imagen</a>
        </div>
      </div>    
      <br>
    - Once your user is registered, you must create an account (if you registered your user in the development environment, the system will automatically create your account). You will be redirected to the following screen where you must fill out all the form data:      
    <br>
      <br>
      <div class='container'>
        <img src='./assets/onboarding.jpg' alt='Avatar' class='image' style='width:100%'>
        <div class='middle'>
          <a target='_blank' href='/assets/onboarding.jpg' class='text'>Ver imagen</a>
        </div>
      </div>    
      <br>
    - After creating the account, you will need the public and private tokens to perform the signature. You can use the ones generated by the system initially or create new ones. To do this, you should go to the left-hand side menu and click on **“Integration”**, which will display a submenu of options. Select **“Integration and API tokens”**, as shown below:      
     <br>
      <br>
      <div class='container'>
        <img src='./assets/tokens-menu.jpg' alt='Avatar' class='image' style='width:100%'>
        <div class='middle'>
          <a target='_blank' href='/assets/tokens-menu.jpg' class='text'>Ver imagen</a>
        </div>
      </div>    
      <br>
    - The following screen will be displayed:   
    <br>
    <br>
      <div class='container'>
        <img src='./assets/tokens.jpg' alt='Avatar' class='image' style='width:100%'>
        <div class='middle'>
          <a target='_blank' href='/assets/tokens.jpg' class='text'>Ver imagen</a>
        </div>
      </div>    
      <br>  
     
      The **public token** is used to identify the merchant, and the **private token** is used to create the signature.

    # Signature creation   
    Here is an example of how to create the signature using JavaScript.   
    - You should import the **cryptojs** module:
    ```javascript
    const CryptoJS = require("crypto-js");
    ```
    - Use the API Endpoint: 
    ```javascript
    const requestPath = encodeURIComponent("/api/suclient");
    ```
    - Set the parameters for the request: 
    ```javascript
    const data = {
         "email": "alguien@example.com",
         "name": "John Doe",
         "rut": "111111111",
         "phone": "912345678",
         "address": "Moneda 101",
         "country": "Chile",
         "region": "Metropolitana",
         "city": "Santiago",
         "postal_code": "850000",
         "additional_parameters": {
            "parameter_1": "example",
            "parameter_2": "example 2",
          },
        };
    ```
    - Sort the **data** parameters:
    ```javascript
      const orderedData = {};
        Object.keys(data)
        .sort()
        .forEach(function (key) {
          orderedData[key] = data[key];
          if (typeof orderedData[key] === "object") {
            delete orderedData[key];
          }
        }); 
    ```
    The **data** will be sorted as follows: 
    ```javascript
        "address": "Moneda 101",
        "city": "Santiago",
        "country": "Chile",
        "email": "alguien@example.com",
        "name": "John Doe",
        "phone": "912345678"
        "postal_code": "850000",
        "region": "Metropolitana",
        "rut": "111111111",
    ```
    - Transform the parameters into URL format: 
    ```javascript
      const arrayConcat = new URLSearchParams(orderedData).toString();
    ```
    - You will obtain the following text string as a result: 
    ```javascript
      "address=Moneda+101&;city=Santiago&;country=Chile&;email=alguien%40example.com&;name=John+Doe&;phone=912345678&;postal_code=850000&;region=Metropolitana&;rut=111111111"
    ```
    - Concatenate the parameters in URL format along with the API Endpoint:
    ```javascript 
    const concat = requestPath + "&" + arrayConcat;
    ```
      It will look like this:
    ```javascript
      "%2Fapi%2Fsuclient&;address=Moneda+101&;city=Santiago&;country=Chile&;email=alguien%40exle.com&;name=John+Doe&;phone=912345678&;postal_code=850000&;region=Metropolitana&;rut=111111111"
    ```
    - Finally, save the encrypted signature in a variable using **cryptojs.hmacsha256**, in which you must include the private token of the PAYKU application described above:
    ```javascript
    const sign = CryptoJS.HmacSHA256(concat, "token privado").toString();
    ``` 
    This would be an example of how your signature would look like:
    ```javascript
      "4c399a258d378a81857020bcb1f0d74544ba7a05ba9c636c3e9bfc63ebf224d3"
    ```
    **Note:** It is worth noting that the tokens and URL should correspond to the development environment you are using.

    # Create transaction      
    To create transactions, you can do it from the **"development"** environment at https://des.payku.cl/ or the **"production"** environment at https://app.payku.cl/. To do this, follow these steps:

    - Create a variable by setting the parameters for the API request as shown below:
     ```javascript
          let data = {
            email: "johndoe@example.com",
            order: "98745",
            subject: "payment description",
            amount: 25000,
            payment: 1,
            expired: "2023-10-19 13:05:10",
            urlreturn: "https://youwebsite.com/urlreturn?orderClient=98745",
            urlnotify: "https://www.youwebsite.com/urlnotify?orderClient=98745",
            additional_parameters: {
              parameters1:"keyValue",
              parameters2:"keyValue",
              order_ext:"fff-777"
            }
          };
    request(data);
    ```
    ### Parameter descriptions:
    <div class="content-parametros">
    <table>
      <tbody>
        <tr>
          <td style="text-align: right">
            <p class="psmall"><strong>"email"<strong></p>
          </td>
          <td class="Description">User's email .</td>
        </tr>
        <tr>
          <td style="text-align: right">
            <p class="psmall"><strong>"order"<strong></p>
          </td>
          <td class="Description">Merchant's order.</td>
        </tr>
        <tr>
          <td style="text-align: right">
            <p class="psmall"><strong>"subject"<strong></p>
          </td>
          <td class="Description">Order description.</td>
        </tr>
         <tr>
          <td style="text-align: right">
            <p class="psmall"><strong>"amount"<strong></p>
          </td>
          <td class="Description">Order amount.</td>
        </tr>
         <tr>
          <td style="text-align: right">
            <p class="psmall"><strong>"currency"<strong></p>
          </td>
          <td class="Description">Currency.</td>
        </tr>
        <tr>
          <td style="text-align: right">
            <p class="psmall"><strong>"payment"<strong></p>
          </td>
          <td class="Description">Payment method identifier. If the identifier is sent, the payer will be redirected directly to the specified payment method.
              <br>
              1 Webpay
              <br>
              3 Multicaja Efectivo
              <br>
              4 Multicaja Transferencia
              <br>
              6 Pago46
              <br>
              8 Hites
              <br>
              9 Mach
              <br>
             11 Khipu
              <br>
             12 Chek
              <br>
             15 servifacil
              <br>
             17 Vepuy (moneda VES)
              <br>
            99 All.
        </td>
      </tr>
      <tr>
        <td style="text-align: right">
          <p class="psmall"><strong>"expired"<strong></p>
        </td>
        <td class="Description">Expiration date of the transaction. <strong>This field is optional.</strong> Allowed format (Year-month-day hour:minute:second) Example: 2023-10-18 23:59:59<br>
        If it is sent, it must comply with the following rules:
        <br>
         &bull; -	It must be more than 5 minutes from the current date and time (Santiago time). 
        <br>
         &bull; -	urlreturn is required and will be attached as <strong>GET/?message_error=expired&id=trx60dc327d9e4c094</strong>
        </td>
      </tr>
         <tr>
          <td style="text-align: right">
            <p class="psmall"><strong>"urlreturn"<strong></p>
          </td>
          <td class="Description">URL of the merchant's return page where Payku will redirect the payer after 3 seconds of obtaining the transaction result.</td>
        </tr>
        <tr>
          <td style="text-align: right">
            <p class="psmall"><strong>"urlnotify"<strong></p>
          </td>
          <td class="Description">Merchant's callback URL where Payku will notify the payment.</td>
        </tr>
        <tr>
          <td style="text-align: right">
            <p class="psmall"><strong>"additional_parameters"<strong></p>
          </td>
          <td class="Description">Additional customer parameters (Optional).</td>
        </tr>
      </tbody>
    </table>
    </div>
    - Create a function with a **fetch** request that queries the API endpoint. In **“Authorization”** you must enter your **public token** described above.

    ```javascript
    const request = async (data) => {
      const response = await fetch('https://BASE_URL/api/transaction', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer TOKEN-PUBLICO'
        },
        body: JSON.stringify(data)
      });
    const result = await response.json();
    console.log(result)
    }
    request(data);
    ```
    **Note:** The **"create transaction"** method does not require a signature (sign). 
    - 2.2.	Once the transaction is created, it will display the following response:
    ```javascript
      {
        "status": "pending",
        "id": "trx3b4d77b43acd9a720",
        "url": "https://BASE_URL/url_de_pago"
      }
    ```
    **Note:** Use the URL from the response to redirect the customer to the bank's page where they will enter their details.

    # Confirm transaction  
    If you have already created a transaction via REST API, you can confirm it as follows.
    - You should query the following Endpoint, in which you append the **ID of the previously created transaction** at the end of the path. Similar to the previous step, you should add the **public token** of your development environment in the **“Authorization”** to make the query as shown below:

     ```javascript
      const request = async () => {
      const response = await fetch('https://BASE_URL/api/transaction/IDtransaccion', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer TOKEN-PUBLICO'
        },
      });
      const result = await response.json();
      console.log(result)
    }
    request();
    ```
    # Payment result notification to the merchant (callback)  

    After the customer completes the payment process at their bank, Payku will automatically respond to the endpoint entered in **"urlnotify"** with the result of the bank transaction.  

    **Approved Example:**  <br>
      {  <br>
      "transaction_id": "9916587765599311", <br>
      "payment_key" : "trx32cb779c0a777fc68",  <br>
      "transaction_key" : "9916581777599311",  <br>
      "verification_key": "8b3e2202fb086a7de93777ae34d5e18c",  <br>
      "order": "199",  <br>
      "status": "success"  <br>
      }  <br>
      **Rejected Example:**  <br>
      {  <br>
      "transaction_id": "9916587765599311",  <br>
      "payment_key" : "trx32cb779c0a777fc68",  <br>
      "transaction_key" : "9916581777599311",  <br>
      "verification_key": "8b3e2202fb086a7de93777ae34d5e18c",  <br>
      "order": "199",  <br>
      "status": "failed"  <br>
      }

    **Note:** To ensure that the notification was generated by Payku, you must immediately make a GET request with the notified transaction ID, thereby performing a crossvalidation that guarantees 100% data integrity and accuracy.  
    <br>
    <br>
    It is worth noting that you can perform live tests of all the available APIs at the following link: https://testing-apirest.payku.cl/. You can also consult Payku's official documentation at: https://docs.payku.cl/#section/.

  version: "2.1.01"
  title: payku API
  termsOfService: "https://payku.cl/legal/"
  contact:
    email: contacto@payku.cl
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  x-logo:
    url: "https://storage.googleapis.com/storage-payku-prd/public/img/payku2020_2.svg"
